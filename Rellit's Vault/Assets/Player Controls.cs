//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""daad600d-8343-4ec0-ae87-ebe9c1443c25"",
            ""actions"": [
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""f24882a4-d047-4f59-8082-5129964d02fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""54488aa7-465b-467c-8af1-f3455e820916"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S"",
                    ""type"": ""Button"",
                    ""id"": ""cf4d2727-ab83-4e39-b07d-bda7f73e0f90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""203f73d4-6938-4b72-9fea-56dd6645fbcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""41487455-7119-47e5-b9f1-1186e46e129e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""29267f02-fc3c-496a-9714-d6165e464f7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3b55c45-5122-4a28-88a1-ea0d3d3bd96a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e43ab8a-92c9-40f6-93fe-15bde06cd332"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76d7e6d0-f8b3-426b-bfd2-4f5659209543"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e3ec2d8-cb32-45ba-81fb-3636f4a13465"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9ae3760-98f0-4053-9d88-b0b9686eb124"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46d5f853-ad6c-48a1-bf15-44c97962889b"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14001557-56ec-4a0a-94ab-e930d6f4bbff"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_W = m_Camera.FindAction("W", throwIfNotFound: true);
        m_Camera_A = m_Camera.FindAction("A", throwIfNotFound: true);
        m_Camera_S = m_Camera.FindAction("S", throwIfNotFound: true);
        m_Camera_D = m_Camera.FindAction("D", throwIfNotFound: true);
        m_Camera_Space = m_Camera.FindAction("Space", throwIfNotFound: true);
        m_Camera_Shift = m_Camera.FindAction("Shift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_W;
    private readonly InputAction m_Camera_A;
    private readonly InputAction m_Camera_S;
    private readonly InputAction m_Camera_D;
    private readonly InputAction m_Camera_Space;
    private readonly InputAction m_Camera_Shift;
    public struct CameraActions
    {
        private @PlayerControls m_Wrapper;
        public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @W => m_Wrapper.m_Camera_W;
        public InputAction @A => m_Wrapper.m_Camera_A;
        public InputAction @S => m_Wrapper.m_Camera_S;
        public InputAction @D => m_Wrapper.m_Camera_D;
        public InputAction @Space => m_Wrapper.m_Camera_Space;
        public InputAction @Shift => m_Wrapper.m_Camera_Shift;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @W.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnW;
                @W.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnW;
                @W.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnW;
                @A.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnA;
                @S.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnS;
                @S.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnS;
                @S.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnS;
                @D.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnD;
                @D.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnD;
                @D.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnD;
                @Space.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnSpace;
                @Shift.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnShift;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @W.started += instance.OnW;
                @W.performed += instance.OnW;
                @W.canceled += instance.OnW;
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @S.started += instance.OnS;
                @S.performed += instance.OnS;
                @S.canceled += instance.OnS;
                @D.started += instance.OnD;
                @D.performed += instance.OnD;
                @D.canceled += instance.OnD;
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface ICameraActions
    {
        void OnW(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnS(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
    }
}
